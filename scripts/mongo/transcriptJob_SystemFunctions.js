db.system.js.save(    {        _id: "cJobStats",        value: function () {            var pipeline = [                {                    $group: {                        _id: {"type": "$type", "status": "$status"},                        "count": {"$sum": 1}                    }                },                {                    "$sort": {                        "_id.type": 1                    }                }            ];            return db.getCollection('student-transcript.jobs').aggregate(pipeline);        }    });db.system.js.save(    {        _id: "qFailingJobs",        value: function (daysOld) {            if (isNaN(daysOld)) daysOld = 0;            var millisecondsPerDay = 24 /*hours*/ * 60 /*minutes*/ * 60 /*seconds*/ * 1000 /*milliseconds)*/;            return {                $or: [                    {status: 'waiting'},                    {status: 'failed'}                ],                created: {$lte: new Date(ISODate().getTime() - (daysOld * millisecondsPerDay))},                failures: {$exists: true}            };        }    });db.system.js.save(    {        _id: "cFailingJobs",        value: function (daysOld) {            return db.getCollection('student-transcript.jobs').find(qFailingJobs(daysOld));        }    });db.system.js.save(    {        "_id": "uSetAgencyAssignedID",        "value": function (elem) {            try {                var agencyId = null;                var agencyIdentifiers = elem.pescCollegeTranscript.CollegeTranscript.Student.Person.AgencyIdentifier;                var agencyIdentifier;                for (idx in agencyIdentifiers) {                    try {                        agencyIdentifier = agencyIdentifiers[idx];                        if (agencyIdentifier.AgencyCode == "MutuallyDefined" && agencyIdentifier.AgencyName == "OCAS Application Number") {                            agencyId = agencyIdentifier.AgencyAssignedID;                            break;                        }                    } catch (e) {                        // silently continue                    }                }                if (agencyId) {                    db.Transcript.update(                        {                            _id: elem._id                        },                        {                            $set: {                                "pescCollegeTranscript.CollegeTranscript.Student.Person.AgencyAssignedID": agencyId                            }                        }                    );                }            } catch (e) {                // silently continue            }        }    });db.system.js.save(    {        "_id": "daysAgo",        "value": function (days) {            days = days || 0;            var millisecondsPerDay = 24 /*hours*/ * 60 /*minutes*/ * 60 /*seconds*/ * 1000 /*milliseconds)*/;            return new Date(ISODate().getTime() - (days * millisecondsPerDay));        }    });db.system.js.save(    {        "_id": "qCompletedJobs",        "value": function (daysOld) {            daysOld = daysOld || 90;            var millisecondsPerDay = 24 /*hours*/ * 60 /*minutes*/ * 60 /*seconds*/ * 1000 /*milliseconds)*/;            return {                status: 'completed',                created: {$lte: new Date(ISODate().getTime() - (daysOld * millisecondsPerDay))}            };        }    });db.system.js.save(    {        "_id": "cJobStatsByMatch",        "value": function (match) {            var pipeline = [{$match: match}, {                $group: {                    _id: {"type": "$type", "status": "$status"},                    "count": {"$sum": 1}                }            }, {"$sort": {"_id.type": 1}}];            return db.getCollection('student-transcript.jobs').aggregate(pipeline);        }    });